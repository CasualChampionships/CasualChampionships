package net.casual.championships.uhc

import net.casual.arcade.font.BitmapFont
import net.casual.arcade.utils.ComponentUtils.translatable
import net.minecraft.network.chat.Component

object UHCComponents {
    val CASUAL_UHC get() = Component.literal("Casual UHC")

    val ADVANCEMENT_ROOT by translatable("uhc.advancements.root")
    val ADVANCEMENT_ROOT_DESC by translatable("uhc.advancements.root.desc")
    val ADVANCEMENT_FIRST_BLOOD by translatable("uhc.advancements.firstBlood")
    val ADVANCEMENT_FIRST_BLOOD_DESC by translatable("uhc.advancements.firstBlood.desc")
    val ADVANCEMENT_EARLY_EXIT by translatable("uhc.advancements.earlyExit")
    val ADVANCEMENT_EARLY_EXIT_DESC by translatable("uhc.advancements.earlyExit.desc")
    val ADVANCEMENT_MOSTLY_HARMLESS by translatable("uhc.advancements.mostlyHarmless")
    val ADVANCEMENT_MOSTLY_HARMLESS_DESC by translatable("uhc.advancements.mostlyHarmless.desc")
    val ADVANCEMENT_HEAVY_HITTER by translatable("uhc.advancements.heavyHitter")
    val ADVANCEMENT_HEAVY_HITTER_DESC by translatable("uhc.advancements.heavyHitter.desc")
    val ADVANCEMENT_WINNER by translatable("uhc.advancements.winner")
    val ADVANCEMENT_WINNER_DESC by translatable("uhc.advancements.winner.desc")
    val ADVANCEMENT_COMBAT_LOGGER by translatable("uhc.advancements.combatLogger")
    val ADVANCEMENT_COMBAT_LOGGER_DESC by translatable("uhc.advancements.combatLogger.desc")
    val ADVANCEMENT_NOT_DUSTLESS by translatable("uhc.advancements.notDustless")
    val ADVANCEMENT_NOT_DUSTLESS_DESC by translatable("uhc.advancements.notDustless.desc")
    val ADVANCEMENT_PARKOUR_MASTER by translatable("uhc.advancements.parkourMaster")
    val ADVANCEMENT_PARKOUR_MASTER_DESC by translatable("uhc.advancements.parkourMaster.desc")
    val ADVANCEMENT_WORLD_RECORD_PACE by translatable("uhc.advancements.worldRecordPace")
    val ADVANCEMENT_WORLD_RECORD_PACE_DESC by translatable("uhc.advancements.worldRecordPace.desc")
    val ADVANCEMENT_EMBARRASSING by translatable("uhc.advancements.thatsEmbarrassing")
    val ADVANCEMENT_EMBARRASSING_DESC by translatable("uhc.advancements.thatsEmbarrassing.desc")
    val ADVANCEMENT_BUSTED by translatable("uhc.advancements.busted")
    val ADVANCEMENT_BUSTED_DESC by translatable("uhc.advancements.busted.desc")
    val ADVANCEMENT_DEMOLITION_EXPERT by translatable("uhc.advancements.demolitionExpert")
    val ADVANCEMENT_DEMOLITION_EXPERT_DESC by translatable("uhc.advancements.demolitionExpert.desc")
    val ADVANCEMENT_WE_BELIEVE by translatable("uhc.advancements.okWeBelieveYouNow")
    val ADVANCEMENT_WE_BELIEVE_DESC by translatable("uhc.advancements.okWeBelieveYouNow.desc")
    val ADVANCEMENT_FALLING_BLOCK by translatable("uhc.advancements.fallingBlock")
    val ADVANCEMENT_FALLING_BLOCK_DESC by translatable("uhc.advancements.fallingBlock.desc")
    val ADVANCEMENT_DREAM_LUCK by translatable("uhc.advancements.dreamLuck")
    val ADVANCEMENT_DREAM_LUCK_DESC by translatable("uhc.advancements.dreamLuck.desc")
    val ADVANCEMENT_BROKEN_ANKLES by translatable("uhc.advancements.brokenAnkles")
    val ADVANCEMENT_BROKEN_ANKLES_DESC by translatable("uhc.advancements.brokenAnkles.desc")
    val ADVANCEMENT_ON_THE_EDGE by translatable("uhc.advancements.onTheEdge")
    val ADVANCEMENT_ON_THE_EDGE_DESC by translatable("uhc.advancements.onTheEdge.desc")
    val ADVANCEMENT_SKILL_ISSUE by translatable("uhc.advancements.skillIssue")
    val ADVANCEMENT_SKILL_ISSUE_DESC by translatable("uhc.advancements.skillIssue.desc")
    val ADVANCEMENT_SOLOIST by translatable("uhc.advancements.soloist")
    val ADVANCEMENT_SOLOIST_DESC by translatable("uhc.advancements.soloist.desc")
    val ADVANCEMENT_NOT_NOW by translatable("uhc.advancements.notNow")
    val ADVANCEMENT_NOT_NOW_DESC by translatable("uhc.advancements.notNow.desc")
    val ADVANCEMENT_KATIE by translatable("uhc.advancements.ldap")
    val ADVANCEMENT_KATIE_DESC by translatable("uhc.advancements.ldap.desc")
    val ADVANCEMENT_BORED by translatable("uhc.advancements.officiallyBored")
    val ADVANCEMENT_BORED_DESC by translatable("uhc.advancements.officiallyBored.desc")
    val ADVANCEMENT_DISTRACTED by translatable("uhc.advancements.distracted")
    val ADVANCEMENT_DISTRACTED_DESC by translatable("uhc.advancements.distracted.desc")
    val ADVANCEMENT_FIND_THE_BUTTON by translatable("uhc.advancements.findTheButton")
    val ADVANCEMENT_FIND_THE_BUTTON_DESC by translatable("uhc.advancements.findTheButton.desc")
    val ADVANCEMENT_UH_OH by translatable("uhc.advancements.uhOh")
    val ADVANCEMENT_UH_OH_DESC by translatable("uhc.advancements.uhOh.desc")
    val ADVANCEMENT_BASICALLY by translatable("uhc.advancements.basically")
    val ADVANCEMENT_BASICALLY_DESC by translatable("uhc.advancements.basically.desc")
    val ADVANCEMENT_TEAM_PLAYER by translatable("uhc.advancements.teamPlayer")
    val ADVANCEMENT_TEAM_PLAYER_DESC by translatable("uhc.advancements.teamPlayer.desc")
    val ADVANCEMENT_LAST_MAN by translatable("uhc.advancements.lastManStanding")
    val ADVANCEMENT_LAST_MAN_DESC by translatable("uhc.advancements.lastManStanding.desc")
    val ADVANCEMENT_BEAR_CARED by translatable("uhc.advancements.bearCared")
    val ADVANCEMENT_BEAR_CARED_DESC by translatable("uhc.advancements.bearCared.desc")

    val BROADCAST_HOSTED_BY by translatable("uhc.broadcast.hostedBy")
    val BROADCAST_BORDER_WARNING by translatable("uhc.broadcast.borderWarning")
    val BROADCAST_SPECTATING by translatable("uhc.broadcast.spectator")
    val BROADCAST_NO_POTIONS by translatable("uhc.broadcast.noPotions")
    val BROADCAST_GLOBAL_CHAT by translatable("uhc.broadcast.globalChat")
    val BROADCAST_NIGHT_VISION by translatable("uhc.broadcast.nightVision")
    val BROADCAST_TEAM_GLOW by translatable("uhc.broadcast.teamGlow")
    val BROADCAST_MINESWEEPER by translatable("uhc.broadcast.minesweeper")
    val BROADCAST_RULES by translatable("uhc.broadcast.rules")
    val BROADCAST_S_COMMAND by translatable("uhc.broadcast.specCommand")
    val BROADCAST_PLAYER_HEADS by translatable("uhc.broadcast.playerHeads")
    val BROADCAST_REMOVE_ME by translatable("uhc.broadcast.joke")

    object Bitmap: BitmapFont(UHCMod.id("bitmap_font")) {
        val TITLE by add(texture("uhc_title.png"), 8, 9)
    }
}